AWSTemplateFormatVersion: 2010-09-09
Description: >
  Template to deploy a lambda which is triggered by an S3 event.
Resources:
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/ScopePermissions
      Policies:
      - PolicyName: LambdaLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Code:
        S3Bucket: group2-test-dont-delete-bruv
        S3Key: deployment_package-7e83d061903e.zip

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Code:
        S3Bucket: group2-test-dont-delete-bruv
        S3Key: deman4teststackgroup2-LambdaFunction-jiRj5N6AEQ6U-bc70cadb-01b1-42c5-ad95-7e83d061903e.zip
              
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: deman4group2test222
      #NotificationConfiguration:
        #LambdaConfigurations:
          #Event: s3:ObjectCreated:*
          #Function: !GetAtt LambdaFunction.Arn

  S3BucketPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt S3Bucket.Arn